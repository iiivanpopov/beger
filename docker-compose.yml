services:
  postgres:
    image: postgres:alpine
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=beger
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/18/docker
    networks:
      - network
    restart: unless-stopped
    healthcheck:
      test: [CMD-SHELL, pg_isready, -d, db_prod]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    networks:
      - network
    restart: unless-stopped

  backend:
    build:
      context: apps/backend
      dockerfile: Dockerfile
      args:
        - PORT=$PORT
        - JWT_ACCESS_SECRET=$JWT_ACCESS_SECRET
        - JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET
        - ADMIN_PASSWORD=$ADMIN_PASSWORD
        - SHEET_URL=$SHEET_URL
        - REDIS_URL=redis://redis:6379
        - DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@postgres:5432/beger
    ports:
      - '$PORT:$PORT'
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@postgres:5432/beger
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - network
    restart: unless-stopped

  frontend:
    build:
      context: apps/frontend
      dockerfile: Dockerfile
    ports:
      - '80:80'
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
    networks:
      - network
    restart: unless-stopped

volumes:
  pgdata:
    driver: local

networks:
  network:
    driver: bridge
